f this only happens with large payloads, then we may have a workaround to discard the request body only for authentication. Here is the config snippet:
 
map $http_authorization $discardbody {
    default 0;
    "~NTLM .{1,64}$" 1;
     "~Negotiate .{1,64}$" 1; #Check header
}



...

server {
    listen      443 ssl;
    server_name  server_hostname;
...
if ( $discardbody ) {
    rewrite (.*) /discardbody$1;
}
    location / {
                proxy_pass http://server_hostname;

                proxy_ssl_protocols             TLSv1.2;
                proxy_ssl_ciphers               HIGH:!aNULL:!MD5;
                proxy_ssl_trusted_certificate   /etc/ssl/trustedca.crt;

                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_hide_header   Referer;
                proxy_hide_header   Origin;
                proxy_set_header    Referer                 '';
                proxy_set_header    Origin                  '';
                proxy_set_header  Host              $http_host;
                proxy_set_header  X-Real-IP         $remote_addr;
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
                client_max_body_size 200M;
    }

    location /discardbody/ {
                rewrite ^/discardbody/(.*) /$1 break;
	        internal;
	        proxy_set_body "";
	        proxy_set_header Content-Length 0;
                proxy_pass http://server_hostname;

                proxy_ssl_protocols             TLSv1.2;
                proxy_ssl_ciphers               HIGH:!aNULL:!MD5;
                proxy_ssl_trusted_certificate   /etc/ssl/trustedcaa.crt;

                proxy_http_version 1.1;
                proxy_set_header Connection "";
                proxy_hide_header   Referer;
                proxy_hide_header   Origin;
                proxy_set_header    Referer                 '';
                proxy_set_header    Origin                  '';
                proxy_set_header  Host              $http_host;
                proxy_set_header  X-Real-IP         $remote_addr;
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
                client_max_body_size 200M;
}

        error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
        root   /usr/share/nginx/html;
        }
}

Please try it out and let us know the result. 


##################################################################################################################################


##################################################################################################################################
NIC
apiVersion: k8s.nginx.org/v1
kind: VirtualServer
metadata:
  name: sub-dme-virtualserver
  namespace: nginx-ingress
spec:
  host: non_gov_website
  http-snippets: |
    upstream nginx-ingress-dmz-sub-ingress-non_gov_website-sub--dmz-svc-443 {
        zone nginx-ingress-dmz-sub-ingress-non_gov_website-sub--dmz-svc-443 512k;
        server non_gov_website:443 max_fails=1 fail_timeout=10s max_conns=0 resolve;
        keepalive 16;
        ntlm;
    }
    map $http_authorization $discardbody {
    default 0;
    "~NTLM .{1,64}$" 1;
    "~Negotiate .{1,64}$" 1; #Check header
    }
  ingressClassName: nginx-egress
  server-snippets: |
    if ( $discardbody ) {
    rewrite (.*) /discardbody$1;
    }
    access_log /var/log/nginx/access.log main;
    location / {
        proxy_http_version 1.1;
        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        client_max_body_size 30m;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Connection "";
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering on;
        proxy_pass https://nginx-ingress-dmz-sub-ingress-non_gov_website-sub--dmz-svc-443;
    }
    location /discardbody/ {
        rewrite ^/discardbody/(.*) /$1 break;
        internal;
        proxy_set_body "";
        proxy_set_header Content-Length 0;
        proxy_http_version 1.1;
        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
        client_max_body_size 30m;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Connection "";
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering on;
        proxy_pass https://nginx-ingress-dmz-sub-ingress-non_gov_website-sub--dmz-svc-443;
    }
  tls:
    redirect:
      enable: true
    secret: default-server-secret


##################################################################################################################################
The NTLM expect using the same keepalive connection for the whole communication. But nginx doesn't keep the particular backend connection for the particular client. The keepalive connection can be reused by any client.
The NTLM handshake includes 3 requests (two of them with 401 and last one 200):
https://techcommunity.microsoft.com/t5/iis-support-blog/ntlm-want-to-know-how-it-works/ba-p/347849
Nginx knows about that and when the 'ntlm' directive is enabled, it checks the values of Authorization (request) and WWW-Authenticate (response) headers.
On first request the backend responds with 'WWW-Authenticate: NTLM" or "WWW-Authenticate: Negotiate" headers and nginx knows that it's start of establishing an ntlm connection. It returns 401 to the client and send the next client request (with Authorization header) into the same backend connection. After that, nginx considers the connection established and all further requests from this client are sent to the backend through the same connection.But if the client starts with sending the big (more than 1mb) file it works in this way:
In case of direct connection:
	1. Client establishes http connection to backend and start sending data
	2. backend returns 401
	3. client stops sending data and performs new request with correct Authorization...
	4. ....
	5. After establishing an NTLM connection, the requests don't have the Authorization header
In case of nginx connection:
	1. Client establishes http connection to nginx and start uploading data
	2. nginx establishes http connection to the backend and start sending data to the backend
	3. backend returns 401 before getting the whole request
	4. nginx considers it as an error of establishing a connection (not the whole request is sent to the backend).
	5. 401 is returned to the client, but the ntlm connection isn't started
	6. the client responds with correct Authorization, but it's sent to the backend through another http connection and backend returns  'WWW-Authenticate: NTLM"/"WWW-Authenticate: Negotiate" instead of acknowledgement. And this cycle repeats again and again.
But it happens only for large requests. For small requests nginx is fast enough to send the whole request to the backend before getting 401 from it.That the workaround do:
It set's a variable $discardbody to 1 for every request with non-empty Authorization header (it means ongoing authorization process). With the rewrite directive we redirect these requests to the separate (/discardbody/) location where with remove excessive part from uri and removes the body from the request. It's safe because the backend doesn't expect body in the authorization requests and the client repeats uploading after authorization. Since the body is removed, nginx is able to track the ntlm connection. So, when the client repeats the upload (with no Authorization header, because the connection is already established), nginx serves the request through the standard 'location /' and already created ntlm connection.Hope it makes the case a little bit clear
